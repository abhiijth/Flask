# -*- coding: utf-8 -*-
"""Flask.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13aS-Ta1W9WTSjB6IQkBw09GWvaV6q5f9

# Flask vs Streamlit

## Where to Use Streamlit
Streamlit is a great framework for quickly building interactive web applications, especially for **data science and machine learning projects**. It allows you to create UI components like buttons, sliders, and charts with minimal code.

## Limitations of Streamlit
- **Limited Customization**: Streamlit is designed mainly for quick prototyping, not full-scale web applications.
- **No Multi-Page Handling**: Difficult to create complex multi-page apps with user authentication.
- **Backend Limitations**: Not ideal for handling complex backend logic, APIs, or databases.

Because of these limitations, we use **Flask** when we need more control over the application‚Äôs structure, backend logic, and API handling.

---

# What is **Flask**?
Flask is a **lightweight web framework** in Python used for building web applications and APIs. It is minimalistic, flexible, and widely used for web development.

## Why Use Flask?
- **More Control**: Unlike Streamlit, Flask gives you full control over both frontend and backend.
- **Can Handle APIs**: Flask allows you to build REST APIs for web apps and mobile apps.
- **Database Integration**: Works well with databases like SQLite, MySQL, and PostgreSQL.
- **Custom UI**: Unlike Streamlit, you can use HTML, CSS, and JavaScript to design your own UI.

## Where to Use Flask?
- When you need to create a **backend** for a web or mobile application.
- When you need to **serve machine learning models** as an API.
- When you want a **custom user interface** using HTML, CSS, and JavaScript.
- When you need **user authentication, multi-page apps, or database integration**.

---

# How to Use Flask (Basic Setup)

### 1. Install Flask
```bash
pip install flask
```

### 2. Create a Simple Flask App (`app.py`)
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, Flask!"

if __name__ == '__main__':
    app.run(debug=True)
```

### 3. Run the Flask App
```bash
python app.py
```
Go to **http://127.0.0.1:5000/** in your browser to see the output.

---

# Adding Routes in Flask
Routes define different pages in your web app.

### Example:
```python
@app.route('/about')
def about():
    return "This is the About Page"
```
Now, visiting **http://127.0.0.1:5000/about** will show "This is the About Page".

---

# Rendering Templates in Flask
Flask can use HTML templates to display dynamic content.

### 1. Create a `templates` folder and add an `index.html` file:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
</head>
<body>
    <h1>Welcome to Flask</h1>
</body>
</html>
```

### 2. Modify `app.py` to render the template:
```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
```

Now, Flask will serve the `index.html` page when you visit **http://127.0.0.1:5000/**.

---

### **HTTP Methods**  

1Ô∏è‚É£ **GET** ‚Üí **Requests Data** (Used for reading or retrieving information)  
   - Example: Opening a webpage (`GET /home`)  
   - **Does not** change anything on the server.  
   - Data is **visible in the URL** (e.g., `example.com/search?q=flowers`).  

2Ô∏è‚É£ **POST** ‚Üí **Sends Data** (Used for submitting forms or creating new data)  
   - Example: Logging in (`POST /login`)  
   - **Sends data securely** (not visible in the URL).  
   - Used for **form submissions**, etc.  

3Ô∏è‚É£ **PUT** ‚Üí **Updates Data** (Used for modifying existing information)  
   - Example: Updating user profile (`PUT /user/123`)  
   - Replaces **entire data** with new data.  

4Ô∏è‚É£ **PATCH** ‚Üí **Partially Updates Data**  
   - Example: Changing only email in a user profile (`PATCH /user/123`)  
   - **Modifies only specific fields** instead of replacing everything.  

5Ô∏è‚É£ **DELETE** ‚Üí **Removes Data**  
   - Example: Deleting a comment (`DELETE /comment/45`)  
   - Used when removing items from a database or API.  

üëâ **Summary:**  
- **GET** ‚Üí Read data üìñ  
- **POST** ‚Üí Send new data ‚úâÔ∏è  
- **PUT** ‚Üí Update all data üîÑ  
- **PATCH** ‚Üí Update some data üõ†  
- **DELETE** ‚Üí Remove data ‚ùå
"""